<?php
/**
 * Pix
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Pix
 *
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços Pix do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * OpenAPI spec version: 2.1.2
 * Contact: suporte.ti@bcb.gov.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Pix Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Pix implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Pix';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_to_end_id' => '\Swagger\Client\Model\EndToEndId',
'txid' => '\Swagger\Client\Model\TxId',
'valor' => 'string',
'horario' => '\DateTime',
'info_pagador' => 'string',
'devolucoes' => '\Swagger\Client\Model\Devolucao[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_to_end_id' => null,
'txid' => null,
'valor' => null,
'horario' => 'date-time',
'info_pagador' => null,
'devolucoes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_to_end_id' => 'endToEndId',
'txid' => 'txid',
'valor' => 'valor',
'horario' => 'horario',
'info_pagador' => 'infoPagador',
'devolucoes' => 'devolucoes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_to_end_id' => 'setEndToEndId',
'txid' => 'setTxid',
'valor' => 'setValor',
'horario' => 'setHorario',
'info_pagador' => 'setInfoPagador',
'devolucoes' => 'setDevolucoes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_to_end_id' => 'getEndToEndId',
'txid' => 'getTxid',
'valor' => 'getValor',
'horario' => 'getHorario',
'info_pagador' => 'getInfoPagador',
'devolucoes' => 'getDevolucoes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_to_end_id'] = isset($data['end_to_end_id']) ? $data['end_to_end_id'] : null;
        $this->container['txid'] = isset($data['txid']) ? $data['txid'] : null;
        $this->container['valor'] = isset($data['valor']) ? $data['valor'] : null;
        $this->container['horario'] = isset($data['horario']) ? $data['horario'] : null;
        $this->container['info_pagador'] = isset($data['info_pagador']) ? $data['info_pagador'] : null;
        $this->container['devolucoes'] = isset($data['devolucoes']) ? $data['devolucoes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['end_to_end_id'] === null) {
            $invalidProperties[] = "'end_to_end_id' can't be null";
        }
        if ($this->container['valor'] === null) {
            $invalidProperties[] = "'valor' can't be null";
        }
        if ($this->container['horario'] === null) {
            $invalidProperties[] = "'horario' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_to_end_id
     *
     * @return \Swagger\Client\Model\EndToEndId
     */
    public function getEndToEndId()
    {
        return $this->container['end_to_end_id'];
    }

    /**
     * Sets end_to_end_id
     *
     * @param \Swagger\Client\Model\EndToEndId $end_to_end_id end_to_end_id
     *
     * @return $this
     */
    public function setEndToEndId($end_to_end_id)
    {
        $this->container['end_to_end_id'] = $end_to_end_id;

        return $this;
    }

    /**
     * Gets txid
     *
     * @return \Swagger\Client\Model\TxId
     */
    public function getTxid()
    {
        return $this->container['txid'];
    }

    /**
     * Sets txid
     *
     * @param \Swagger\Client\Model\TxId $txid txid
     *
     * @return $this
     */
    public function setTxid($txid)
    {
        $this->container['txid'] = $txid;

        return $this;
    }

    /**
     * Gets valor
     *
     * @return string
     */
    public function getValor()
    {
        return $this->container['valor'];
    }

    /**
     * Sets valor
     *
     * @param string $valor Valor do Pix.
     *
     * @return $this
     */
    public function setValor($valor)
    {
        $this->container['valor'] = $valor;

        return $this;
    }

    /**
     * Gets horario
     *
     * @return \DateTime
     */
    public function getHorario()
    {
        return $this->container['horario'];
    }

    /**
     * Sets horario
     *
     * @param \DateTime $horario Horário em que o Pix foi processado no PSP.
     *
     * @return $this
     */
    public function setHorario($horario)
    {
        $this->container['horario'] = $horario;

        return $this;
    }

    /**
     * Gets info_pagador
     *
     * @return string
     */
    public function getInfoPagador()
    {
        return $this->container['info_pagador'];
    }

    /**
     * Sets info_pagador
     *
     * @param string $info_pagador info_pagador
     *
     * @return $this
     */
    public function setInfoPagador($info_pagador)
    {
        $this->container['info_pagador'] = $info_pagador;

        return $this;
    }

    /**
     * Gets devolucoes
     *
     * @return \Swagger\Client\Model\Devolucao[]
     */
    public function getDevolucoes()
    {
        return $this->container['devolucoes'];
    }

    /**
     * Sets devolucoes
     *
     * @param \Swagger\Client\Model\Devolucao[] $devolucoes devolucoes
     *
     * @return $this
     */
    public function setDevolucoes($devolucoes)
    {
        $this->container['devolucoes'] = $devolucoes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
