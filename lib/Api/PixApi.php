<?php
/**
 * PixApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Pix
 *
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços Pix do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * OpenAPI spec version: 2.1.2
 * Contact: suporte.ti@bcb.gov.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PixApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PixApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pixE2eidDevolucaoIdGet
     *
     * Consultar devolução.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Devolucao
     */
    public function pixE2eidDevolucaoIdGet($e2eid, $id)
    {
        list($response) = $this->pixE2eidDevolucaoIdGetWithHttpInfo($e2eid, $id);
        return $response;
    }

    /**
     * Operation pixE2eidDevolucaoIdGetWithHttpInfo
     *
     * Consultar devolução.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Devolucao, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixE2eidDevolucaoIdGetWithHttpInfo($e2eid, $id)
    {
        $returnType = '\Swagger\Client\Model\Devolucao';
        $request = $this->pixE2eidDevolucaoIdGetRequest($e2eid, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Devolucao',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixE2eidDevolucaoIdGetAsync
     *
     * Consultar devolução.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixE2eidDevolucaoIdGetAsync($e2eid, $id)
    {
        return $this->pixE2eidDevolucaoIdGetAsyncWithHttpInfo($e2eid, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixE2eidDevolucaoIdGetAsyncWithHttpInfo
     *
     * Consultar devolução.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixE2eidDevolucaoIdGetAsyncWithHttpInfo($e2eid, $id)
    {
        $returnType = '\Swagger\Client\Model\Devolucao';
        $request = $this->pixE2eidDevolucaoIdGetRequest($e2eid, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixE2eidDevolucaoIdGet'
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixE2eidDevolucaoIdGetRequest($e2eid, $id)
    {
        // verify the required parameter 'e2eid' is set
        if ($e2eid === null || (is_array($e2eid) && count($e2eid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $e2eid when calling pixE2eidDevolucaoIdGet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pixE2eidDevolucaoIdGet'
            );
        }

        $resourcePath = '/pix/{e2eid}/devolucao/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($e2eid !== null) {
            $resourcePath = str_replace(
                '{' . 'e2eid' . '}',
                ObjectSerializer::toPathValue($e2eid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixE2eidDevolucaoIdPut
     *
     * Solicitar devolução.
     *
     * @param  \Swagger\Client\Model\DevolucaoSolicitada $body Dados para pedido de devolução. (required)
     * @param  \Swagger\Client\Model\EndToEndId $e2eid e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Devolucao
     */
    public function pixE2eidDevolucaoIdPut($body, $e2eid, $id)
    {
        list($response) = $this->pixE2eidDevolucaoIdPutWithHttpInfo($body, $e2eid, $id);
        return $response;
    }

    /**
     * Operation pixE2eidDevolucaoIdPutWithHttpInfo
     *
     * Solicitar devolução.
     *
     * @param  \Swagger\Client\Model\DevolucaoSolicitada $body Dados para pedido de devolução. (required)
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Devolucao, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixE2eidDevolucaoIdPutWithHttpInfo($body, $e2eid, $id)
    {
        $returnType = '\Swagger\Client\Model\Devolucao';
        $request = $this->pixE2eidDevolucaoIdPutRequest($body, $e2eid, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Devolucao',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixE2eidDevolucaoIdPutAsync
     *
     * Solicitar devolução.
     *
     * @param  \Swagger\Client\Model\DevolucaoSolicitada $body Dados para pedido de devolução. (required)
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixE2eidDevolucaoIdPutAsync($body, $e2eid, $id)
    {
        return $this->pixE2eidDevolucaoIdPutAsyncWithHttpInfo($body, $e2eid, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixE2eidDevolucaoIdPutAsyncWithHttpInfo
     *
     * Solicitar devolução.
     *
     * @param  \Swagger\Client\Model\DevolucaoSolicitada $body Dados para pedido de devolução. (required)
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixE2eidDevolucaoIdPutAsyncWithHttpInfo($body, $e2eid, $id)
    {
        $returnType = '\Swagger\Client\Model\Devolucao';
        $request = $this->pixE2eidDevolucaoIdPutRequest($body, $e2eid, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixE2eidDevolucaoIdPut'
     *
     * @param  \Swagger\Client\Model\DevolucaoSolicitada $body Dados para pedido de devolução. (required)
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     * @param  \Swagger\Client\Model\DevolucaoId $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixE2eidDevolucaoIdPutRequest($body, $e2eid, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pixE2eidDevolucaoIdPut'
            );
        }
        // verify the required parameter 'e2eid' is set
        if ($e2eid === null || (is_array($e2eid) && count($e2eid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $e2eid when calling pixE2eidDevolucaoIdPut'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pixE2eidDevolucaoIdPut'
            );
        }

        $resourcePath = '/pix/{e2eid}/devolucao/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($e2eid !== null) {
            $resourcePath = str_replace(
                '{' . 'e2eid' . '}',
                ObjectSerializer::toPathValue($e2eid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixE2eidGet
     *
     * Consultar Pix.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid e2eid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Pix
     */
    public function pixE2eidGet($e2eid)
    {
        list($response) = $this->pixE2eidGetWithHttpInfo($e2eid);
        return $response;
    }

    /**
     * Operation pixE2eidGetWithHttpInfo
     *
     * Consultar Pix.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Pix, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixE2eidGetWithHttpInfo($e2eid)
    {
        $returnType = '\Swagger\Client\Model\Pix';
        $request = $this->pixE2eidGetRequest($e2eid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Pix',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixE2eidGetAsync
     *
     * Consultar Pix.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixE2eidGetAsync($e2eid)
    {
        return $this->pixE2eidGetAsyncWithHttpInfo($e2eid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixE2eidGetAsyncWithHttpInfo
     *
     * Consultar Pix.
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixE2eidGetAsyncWithHttpInfo($e2eid)
    {
        $returnType = '\Swagger\Client\Model\Pix';
        $request = $this->pixE2eidGetRequest($e2eid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixE2eidGet'
     *
     * @param  \Swagger\Client\Model\EndToEndId $e2eid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixE2eidGetRequest($e2eid)
    {
        // verify the required parameter 'e2eid' is set
        if ($e2eid === null || (is_array($e2eid) && count($e2eid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $e2eid when calling pixE2eidGet'
            );
        }

        $resourcePath = '/pix/{e2eid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($e2eid !== null) {
            $resourcePath = str_replace(
                '{' . 'e2eid' . '}',
                ObjectSerializer::toPathValue($e2eid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pixGet
     *
     * Consultar Pix recebidos.
     *
     * @param  \DateTime $inicio inicio (required)
     * @param  \DateTime $fim fim (required)
     * @param  \Swagger\Client\Model\TxId $txid txid (optional)
     * @param  bool $tx_id_presente tx_id_presente (optional)
     * @param  bool $devolucao_presente devolucao_presente (optional)
     * @param  string $cpf cpf (optional)
     * @param  string $cnpj cnpj (optional)
     * @param  int $paginacao_pagina_atual paginacao_pagina_atual (optional, default to 0)
     * @param  int $paginacao_itens_por_pagina paginacao_itens_por_pagina (optional, default to 100)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PixConsultados
     */
    public function pixGet($inicio, $fim, $txid = null, $tx_id_presente = null, $devolucao_presente = null, $cpf = null, $cnpj = null, $paginacao_pagina_atual = '0', $paginacao_itens_por_pagina = '100')
    {
        list($response) = $this->pixGetWithHttpInfo($inicio, $fim, $txid, $tx_id_presente, $devolucao_presente, $cpf, $cnpj, $paginacao_pagina_atual, $paginacao_itens_por_pagina);
        return $response;
    }

    /**
     * Operation pixGetWithHttpInfo
     *
     * Consultar Pix recebidos.
     *
     * @param  \DateTime $inicio (required)
     * @param  \DateTime $fim (required)
     * @param  \Swagger\Client\Model\TxId $txid (optional)
     * @param  bool $tx_id_presente (optional)
     * @param  bool $devolucao_presente (optional)
     * @param  string $cpf (optional)
     * @param  string $cnpj (optional)
     * @param  int $paginacao_pagina_atual (optional, default to 0)
     * @param  int $paginacao_itens_por_pagina (optional, default to 100)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PixConsultados, HTTP status code, HTTP response headers (array of strings)
     */
    public function pixGetWithHttpInfo($inicio, $fim, $txid = null, $tx_id_presente = null, $devolucao_presente = null, $cpf = null, $cnpj = null, $paginacao_pagina_atual = '0', $paginacao_itens_por_pagina = '100')
    {
        $returnType = '\Swagger\Client\Model\PixConsultados';
        $request = $this->pixGetRequest($inicio, $fim, $txid, $tx_id_presente, $devolucao_presente, $cpf, $cnpj, $paginacao_pagina_atual, $paginacao_itens_por_pagina);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PixConsultados',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pixGetAsync
     *
     * Consultar Pix recebidos.
     *
     * @param  \DateTime $inicio (required)
     * @param  \DateTime $fim (required)
     * @param  \Swagger\Client\Model\TxId $txid (optional)
     * @param  bool $tx_id_presente (optional)
     * @param  bool $devolucao_presente (optional)
     * @param  string $cpf (optional)
     * @param  string $cnpj (optional)
     * @param  int $paginacao_pagina_atual (optional, default to 0)
     * @param  int $paginacao_itens_por_pagina (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixGetAsync($inicio, $fim, $txid = null, $tx_id_presente = null, $devolucao_presente = null, $cpf = null, $cnpj = null, $paginacao_pagina_atual = '0', $paginacao_itens_por_pagina = '100')
    {
        return $this->pixGetAsyncWithHttpInfo($inicio, $fim, $txid, $tx_id_presente, $devolucao_presente, $cpf, $cnpj, $paginacao_pagina_atual, $paginacao_itens_por_pagina)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pixGetAsyncWithHttpInfo
     *
     * Consultar Pix recebidos.
     *
     * @param  \DateTime $inicio (required)
     * @param  \DateTime $fim (required)
     * @param  \Swagger\Client\Model\TxId $txid (optional)
     * @param  bool $tx_id_presente (optional)
     * @param  bool $devolucao_presente (optional)
     * @param  string $cpf (optional)
     * @param  string $cnpj (optional)
     * @param  int $paginacao_pagina_atual (optional, default to 0)
     * @param  int $paginacao_itens_por_pagina (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pixGetAsyncWithHttpInfo($inicio, $fim, $txid = null, $tx_id_presente = null, $devolucao_presente = null, $cpf = null, $cnpj = null, $paginacao_pagina_atual = '0', $paginacao_itens_por_pagina = '100')
    {
        $returnType = '\Swagger\Client\Model\PixConsultados';
        $request = $this->pixGetRequest($inicio, $fim, $txid, $tx_id_presente, $devolucao_presente, $cpf, $cnpj, $paginacao_pagina_atual, $paginacao_itens_por_pagina);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pixGet'
     *
     * @param  \DateTime $inicio (required)
     * @param  \DateTime $fim (required)
     * @param  \Swagger\Client\Model\TxId $txid (optional)
     * @param  bool $tx_id_presente (optional)
     * @param  bool $devolucao_presente (optional)
     * @param  string $cpf (optional)
     * @param  string $cnpj (optional)
     * @param  int $paginacao_pagina_atual (optional, default to 0)
     * @param  int $paginacao_itens_por_pagina (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pixGetRequest($inicio, $fim, $txid = null, $tx_id_presente = null, $devolucao_presente = null, $cpf = null, $cnpj = null, $paginacao_pagina_atual = '0', $paginacao_itens_por_pagina = '100')
    {
        // verify the required parameter 'inicio' is set
        if ($inicio === null || (is_array($inicio) && count($inicio) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inicio when calling pixGet'
            );
        }
        // verify the required parameter 'fim' is set
        if ($fim === null || (is_array($fim) && count($fim) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fim when calling pixGet'
            );
        }

        $resourcePath = '/pix';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inicio !== null) {
            $queryParams['inicio'] = ObjectSerializer::toQueryValue($inicio, 'date-time');
        }
        // query params
        if ($fim !== null) {
            $queryParams['fim'] = ObjectSerializer::toQueryValue($fim, 'date-time');
        }
        // query params
        if ($txid !== null) {
            $queryParams['txid'] = ObjectSerializer::toQueryValue($txid, null);
        }
        // query params
        if ($tx_id_presente !== null) {
            $queryParams['txIdPresente'] = ObjectSerializer::toQueryValue($tx_id_presente, null);
        }
        // query params
        if ($devolucao_presente !== null) {
            $queryParams['devolucaoPresente'] = ObjectSerializer::toQueryValue($devolucao_presente, null);
        }
        // query params
        if ($cpf !== null) {
            $queryParams['cpf'] = ObjectSerializer::toQueryValue($cpf, null);
        }
        // query params
        if ($cnpj !== null) {
            $queryParams['cnpj'] = ObjectSerializer::toQueryValue($cnpj, null);
        }
        // query params
        if ($paginacao_pagina_atual !== null) {
            $queryParams['paginacao.paginaAtual'] = ObjectSerializer::toQueryValue($paginacao_pagina_atual, 'int32');
        }
        // query params
        if ($paginacao_itens_por_pagina !== null) {
            $queryParams['paginacao.itensPorPagina'] = ObjectSerializer::toQueryValue($paginacao_itens_por_pagina, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
